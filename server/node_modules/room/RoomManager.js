var shortId = require('shortid');

var roomTypes = require('room/types/RoomTypes');

function RoomManager() {
    this.roomStore = {};
}

RoomManager.prototype.getAvailableRoom = function getAvailableRoom(roomType) {
    var rooms = this.roomStore[roomType];

    //Find available room
    if (rooms !== undefined) {
        for (var i = 0; i < rooms.length; i++) {
            if (!rooms[i].isFull()) {
                return rooms[i];
            }
        }
    }

    //if no available rooms, create one.
    return this.addRoom(roomType);
};

RoomManager.prototype.destroyRoomIfEmpty = function destroyRoomIfEmpty(room) {
    if (destroyRoomIfEmpty.isEmpty()) {
        this.removeRoom(room);
    }
};

RoomManager.prototype.addRoom = function removeRoom(roomType) {
    if (roomTypes[roomType] !== undefined) {
        var uid = shortId.generate();
        var room = new (roomTypes[roomType])(uid);
        
        if (this.roomStore[roomType] === undefined) {
            this.roomStore[roomType] = [room];
        } else {
            this.roomStore[roomType].push(room);
        }
        
        room.on('removedPlayer', this.destroyRoomIfEmpty);

        return room;
    }
};

RoomManager.prototype.removeRoom = function removeRoom(room) {
    var rooms = this.roomStore[room.type];

    for (var i = (rooms.length - 1); i > 0; i--) {
        if (rooms[i].id === room.id) rooms.splice(i, 1);
    }

    room.destroy();
};

//Singleton instance.
var instance = new RoomManager();
module.exports = instance;