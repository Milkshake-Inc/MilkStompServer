function AbstractRouter() {
	this.handlers = {};

	this.notifyHandlers = function(message, user, method) {
		if (this.handlers[method]) {
			var registeredHandlers = this.handlers[method];

			for (var i = 0; i < registeredHandlers.length; i++) {
				registeredHandlers[i](message, user);
			}
		}
	}
}

AbstractRouter.prototype.addHandler = function(property, handler) {
	if (this.handlers[property]) {
		this.handlers[property].push(handler);
	} else {
		this.handlers[property] = [handler];
	}
};

AbstractRouter.prototype.removeHandler = function(property, handler) {
	if (this.handlers[property]) {
		for (var i = (this.handlers[property].length - 1); i >= 0; i--) {
			if (this.handlers[property][i].toString() == handler.toString()) this.handlers[property].splice(i, 1);
		}
	}
};

AbstractRouter.prototype.handle = function(message, user) {
	if (message.opcode) this.notifyHandlers(message, user, message.opcode);
};

module.exports = AbstractRouter;